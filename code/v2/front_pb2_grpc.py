# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import front_pb2 as front__pb2


class FrontStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/front.Front/Register',
                request_serializer=front__pb2.RegisterRequest.SerializeToString,
                response_deserializer=front__pb2.RegisterReply.FromString,
                )
        self.Deregister = channel.unary_unary(
                '/front.Front/Deregister',
                request_serializer=front__pb2.DeregisterRequest.SerializeToString,
                response_deserializer=front__pb2.DeregisterReply.FromString,
                )
        self.Start = channel.unary_unary(
                '/front.Front/Start',
                request_serializer=front__pb2.StartRequest.SerializeToString,
                response_deserializer=front__pb2.StartReply.FromString,
                )
        self.Stop = channel.unary_unary(
                '/front.Front/Stop',
                request_serializer=front__pb2.StopRequest.SerializeToString,
                response_deserializer=front__pb2.StopReply.FromString,
                )
        self.Freeze = channel.unary_unary(
                '/front.Front/Freeze',
                request_serializer=front__pb2.FreezeRequest.SerializeToString,
                response_deserializer=front__pb2.FreezeReply.FromString,
                )
        self.Unfreeze = channel.unary_unary(
                '/front.Front/Unfreeze',
                request_serializer=front__pb2.UnfreezeRequest.SerializeToString,
                response_deserializer=front__pb2.UnfreezeReply.FromString,
                )
        self.Status = channel.unary_unary(
                '/front.Front/Status',
                request_serializer=front__pb2.StatusRequest.SerializeToString,
                response_deserializer=front__pb2.StatusReply.FromString,
                )
        self.Policy = channel.unary_unary(
                '/front.Front/Policy',
                request_serializer=front__pb2.PolicyRequest.SerializeToString,
                response_deserializer=front__pb2.PolicyReply.FromString,
                )


class FrontServicer(object):
    """Missing associated documentation comment in .proto file."""

    def Register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Deregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Freeze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Unfreeze(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Status(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Policy(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_FrontServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=front__pb2.RegisterRequest.FromString,
                    response_serializer=front__pb2.RegisterReply.SerializeToString,
            ),
            'Deregister': grpc.unary_unary_rpc_method_handler(
                    servicer.Deregister,
                    request_deserializer=front__pb2.DeregisterRequest.FromString,
                    response_serializer=front__pb2.DeregisterReply.SerializeToString,
            ),
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=front__pb2.StartRequest.FromString,
                    response_serializer=front__pb2.StartReply.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=front__pb2.StopRequest.FromString,
                    response_serializer=front__pb2.StopReply.SerializeToString,
            ),
            'Freeze': grpc.unary_unary_rpc_method_handler(
                    servicer.Freeze,
                    request_deserializer=front__pb2.FreezeRequest.FromString,
                    response_serializer=front__pb2.FreezeReply.SerializeToString,
            ),
            'Unfreeze': grpc.unary_unary_rpc_method_handler(
                    servicer.Unfreeze,
                    request_deserializer=front__pb2.UnfreezeRequest.FromString,
                    response_serializer=front__pb2.UnfreezeReply.SerializeToString,
            ),
            'Status': grpc.unary_unary_rpc_method_handler(
                    servicer.Status,
                    request_deserializer=front__pb2.StatusRequest.FromString,
                    response_serializer=front__pb2.StatusReply.SerializeToString,
            ),
            'Policy': grpc.unary_unary_rpc_method_handler(
                    servicer.Policy,
                    request_deserializer=front__pb2.PolicyRequest.FromString,
                    response_serializer=front__pb2.PolicyReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'front.Front', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Front(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Register',
            front__pb2.RegisterRequest.SerializeToString,
            front__pb2.RegisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Deregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Deregister',
            front__pb2.DeregisterRequest.SerializeToString,
            front__pb2.DeregisterReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Start',
            front__pb2.StartRequest.SerializeToString,
            front__pb2.StartReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Stop',
            front__pb2.StopRequest.SerializeToString,
            front__pb2.StopReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Freeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Freeze',
            front__pb2.FreezeRequest.SerializeToString,
            front__pb2.FreezeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Unfreeze(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Unfreeze',
            front__pb2.UnfreezeRequest.SerializeToString,
            front__pb2.UnfreezeReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Status(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Status',
            front__pb2.StatusRequest.SerializeToString,
            front__pb2.StatusReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Policy(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/front.Front/Policy',
            front__pb2.PolicyRequest.SerializeToString,
            front__pb2.PolicyReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
